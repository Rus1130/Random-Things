Heap: Variables that are first created are automatically put into the heap. They cannot be read or written to.
Callstack: Variables can be moved into the callstack so they can be modified.

Structure of variables:
{name: "variable_name", value: "variable_value"}

Defining variables:
assign variable_name to variable_value

Creates a variable with the name of "variable_name" and value of "variable_value".

-----

logging variables:
log variable_name

Searches the callstack for the variable "variable_name" and outputs it to the application console.

-----

pulling variables:
pull variable_name

Moves the variable "variable_name" from the heap to the callstack.

-----

pushing variables:
push variable_name

Moves the variable "variable_name" from the callstack to the heap.

-----

dropping variables:
drop variable_name

Removes the variable "variable_name" from the callstack and the heap.

-----

overwriting variables:
owrite variable_name to variabe_value

Overwrites the specified "variable_name" value with "variable_value".

-----

Math:

eval number1 operation number2

valid operations:
+: addition
-: subtraction
*: multiplication
/: division
%: modulus

Evaluates the specified mathmatical operations.

-----

show:

show callstack / heap

Outputs the callstack or heap to the application console.

-----

onkey:

The "onkey" keyword can be used to create keybinds.
Many code lines can be used in the "onkey" event, separated by a comma.

Example:
onkey a => log example_var, screen pixel 40 to color v:pixel_color

-----

display screen:
The display screen is a grid of 53x50 pixels. Each pixel has an ID between 1 and 2650. It starts at the top left pixel, and ends at the bottom right.
Pixel example ID = 40

changing the color of a pixel:
screen pixel pixelID to color colorID
list of color IDS:
1: white
2: black
3: red
4: green
5: blue
6: cyan
7: magenta
8: yellow
9: orange
10: brown
11: pink
12: purple
13: gray
14: light gray
15: dark gray

Variables can be used as pixelIDs and colorIDs by prefixing the variable with "v:".
Example:
screen pixel v:example_var1 to color v:example_var2

The "onkey" keyword can be used to change the color of a pixel.
Example: onkey a => screen pixel 40 to color 2

-----

compare:

Comparison can be done on two strings with the "compare" keyword and the following operators:
< : less than
> : greater than
= : equal to
<= : less than or equal to
>= : greater than or equal to
!= : not equal to

example: comparator1 comparison_operation v:example_var1

Each comparator can only be one word in length.