? - optional
... - repeatable

let gen = new Genogram(genogram, options?);
initialize the genogram
    options (object) -  options available
        options.height (integer) - the height of the genogram (default 500)
        options.width (integer) - the width of the genogram (default 500)
        options.fullscreen (boolean) - whether to make the genogram fullscreen (default false) (overrides height and width)
            NOTE: fullscreen with not resize with the window
            
let Node = gen.createNode("Name");
 
gen.createNode(name)
creates a new node with the given name
    name (string) - the name of the node
    returns (object): the new node object

gen.getNode(name)
gets a node by name
    name (string) - the name of the node
    returns (object): the node object

gen.createPlink(node1, node2)
creates a partner link between two nodes
    node1 (object) - first node
    node2 (object) - second node
    returns (object): the link object

gen.createMonoParLink(parentNode, ...childNodes)
creates a parental link between two nodes
    parentNode (object) - the node to be a parent
    childNodes (object) - the nodes to be children
    returns (object): the link object

gen.createDualParLink(linkID, ...childNodes)
creates a parental link between two nodes
    linkID (integer) - the partner link to use as parents
    childNodes (object) - the nodes to be children
    returns (object): the link object

Node.isChildOf(parent):
returns true if the node is a child of the given parent
    parent (object) - the parent node to check
    returns (bool)

Node.isOffspringOf(parent1, parent2):
returns true if the node is a child of the given parents
    parent1 (object) - the first parent node to check
    parent2 (object) - the second parent node to check
    returns (bool)





